package pages

import (
"fmt"
"morethancoder/t3-clone/views/components"
	"context"
	"morethancoder/t3-clone/db"
	"strings"
)

func GetAuthRecord(ctx context.Context) db.AuthRecord {
    data,ok  := ctx.Value("AuthRecord").(db.AuthRecord)
    if !ok {
        return db.AuthRecord{}
    } 
    return data
}

func GetModelsMap(ctx context.Context) map[string][]db.ModelRecord {
   data, ok := ctx.Value("Models").(map[string][]db.ModelRecord) 
    if !ok {
        return map[string][]db.ModelRecord{}
    } 
    return data
}


templ HomePage() {
<main id="view" data-replace-url="'/'"
data-signals-model={ fmt.Sprintf("'%s'", GetModelsMap(ctx)["google"][0].Name) }
data-signals-prompt=""
data-signals-chat="[]"
data-on-load="@get('/sse')"
>
    <div class="h-full w-full min-h-screen ">
        <span class="fixed top-10 right-1/2 translate-x-1/2 
        badge badge-sm badge-outline badge-info" data-text="$model"></span>
        @HistoryBar()
        @ActionBar()
        @PromptBar()
        @MainSection(Starter())
    </div>
</main>
}

templ MainSection(content templ.Component) {
<section class="flex flex-col gap-4 w-full mx-auto max-w-4xl 
    items-center justify-end h-full min-h-screen px-8 sm:px-16 pb-32 ">
    <div id="chat">
        @content
    </div>
</section>
}

templ Starter() {
<div
data-class="{ 'opacity-100' : true }"
class="w-full opacity-0 transition-all duration-1000">
    <div class="chat chat-start mb-2">
        <div class="chat-image avatar">
            @components.LogoGemini("size-8 text-accent animate-pulse glow")
        </div>
        <div data-signals_model-name-hover="false" class="chat-header p-1">
            <div class="dropdown transition-all duration-300"
            data-on-mouseenter="$_modelNameHover=true"
            data-on-mouseleave="$_modelNameHover=false"
            data-class="{ 'dropdown-open' : $_modelNameHover }"
            >
                <div  class=" flex items-center justify-between 
                        cursor-pointer m-1 gap-1">
                    Gemini 2.5 Pro
                    @components.IconChevronDown("size-4")
                </div>
                <ul tabindex="5" class="dropdown-content menu bg-base-100 rounded-xl
                        border border-base-300
                        z-1 w-52 p-2 shadow-sm">
                    <li>
                        <a>
                            @components.LogoGemini("size-4")
                            Gemini 2.5 Flash
                        </a>
                    </li>
                    <li>
                        <a>
                            @components.LogoGPT("size-4")
                            ChatGPT 4o
                        </a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="chat-bubble">
        <span data-text="new Date().getHours() >= 5 && new Date().getHours() < 12 ? 'Good Morning!' : 'Good Evening!'">Good Morning! </span>
        How can I help you!</div>
    </div>
    <div class="sm:grid grid-cols-1 sm:grid-cols-2 gap-2 p-2 hidden">
        @StarterCard(components.IconSearch("size-5"),
        "What are the latest trends in AI?")
        @StarterCard(components.IconGrad("size-5"),
        "Tell me the most important 20% of crypto so that I understand 80% of it.")
        @StarterCard(components.IconCode("size-5"),
        "Write a Python script to convert a CSV file to a JSON file.")
        @StarterCard(components.IconPlane("size-5"),
        "What are the must-see attractions in Japan?")
    </div>
    <div class="flex gap-4 p-2 justify-end">
        <div class="tooltip tooltip-sm tooltip-bottom tooltip-accent" data-tip="Change Model">
            <button class="btn btn-soft btn-accent btn-circle">
                @components.IconChange("size-5")
            </button>
        </div>
        <div class="tooltip tooltip-sm tooltip-bottom tooltip-accent" data-tip="Change Mood">
            <button class="btn btn-soft btn-accent btn-circle">
                @components.IconLaugh("size-5")
            </button>
        </div>
        <div class="tooltip tooltip-sm tooltip-bottom tooltip-accent" data-tip="Pre-Prompt">
            <button class="btn  btn-soft btn-accent btn-circle">
                @components.IconPenTool("size-5")
            </button>
        </div>
        <div class="tooltip tooltip-sm tooltip-bottom tooltip-accent" data-tip="Daily Read">
            <button class="btn btn-soft btn-accent btn-circle">
                @components.IconNewspaper("size-5")
            </button>
        </div>
        <div class="tooltip tooltip-sm tooltip-bottom tooltip-accent" data-tip="Summerize">
            <button class="btn  btn-soft btn-accent btn-circle">
                @components.IconList("size-5")
            </button>
        </div>
    </div>
</div>
}

templ StarterCard(icon templ.Component, text string) {
<div class="card w-full min-h-40 bg-base-300 card-lg shadow-sm cursor-pointer
    hover:bg-accent hover:text-accent-content hover:transform hover:-translate-y-1 transition-all duration-300">
    <div class="card-body gap-4">
        @icon
        <p>{ text }</p>
        <div class="card-actions absolute top-6 end-6">
            <button class="btn btn-soft btn-circle">
                @components.IconArrowUp("size-5")
            </button>
        </div>
    </div>
</div>
}





templ HistoryBar() {
<section class="fixed z-10 left-0 flex flex-col 
items-start justify-start h-full gap-4
p-4
    ">
    <div class="tooltip tooltip-right tooltip-sm" data-tip="New Chat">
        <button class="btn btn-neutral btn-circle">
            @components.IconSquarePen("size-5")
        </button>
    </div>
    @SlideCard(SlideCardData{
        dir: "left",
        id: "history",
        title: "History",
        icon: components.IconHistory("size-5"),
        content: History(),
        })
    @SlideCard(SlideCardData{
        dir: "left",
        id: "bookmarks",
        title: "Bookmarks",
        icon: components.IconBookmark("size-5"),
        content: Bookmarks(),
    })
</section>
}

templ Bookmarks() {
<h2 class="text-lg font-bold">Bookmarks</h2>
<label class="input ">
  @components.IconSearch("size-4")
  <input tabindex="-1"  type="search" class="grow" placeholder="Search" />
</label>
<ul tabindex="-1" class="list shadow-md min-w-64 max-h-[65vh] overflow-y-scroll
space-y-2 px-1">
    <li class="pb-2 text-xs opacity-60 tracking-wide">Yesterday</li>
    @HistoryItem("Hello")
</ul>

}

templ History() {
<h2 class="text-lg font-bold">History</h2>
<label class="input ">
  @components.IconSearch("size-4")
  <input tabindex="-1"  type="search" class="grow" placeholder="Search" />
</label>
<ul tabindex="-1" class="list shadow-md min-w-72 max-h-[65vh] overflow-y-scroll
space-y-2 px-1">
    <li class="pb-2 text-xs opacity-60 tracking-wide">Yesterday</li>
    @HistoryItem("AI is the future")
    @HistoryItem("AI is Actual Indians")
    @HistoryItem("Work Hard Play Hard")
    @HistoryItem("Stay Focused")
    @HistoryItem("How to be a good human, why my brain is not working, and how to fix it")
    @HistoryItem("AI is the future")
    @HistoryItem("AI is Actual Indians")
    @HistoryItem("Work Hard Play Hard")
    @HistoryItem("Stay Focused")
    @HistoryItem("How to be a good human")
    @HistoryItem("AI is the future")
    @HistoryItem("AI is Actual Indians")
    @HistoryItem("Work Hard Play Hard")
    @HistoryItem("Stay Focused")
    @HistoryItem("How to be a good human")
    @HistoryItem("AI is Actual Indians")
    @HistoryItem("Work Hard Play Hard")
    @HistoryItem("Stay Focused")
    @HistoryItem("How to be a good human")

</ul>
}

templ HistoryItem(text string) {
    <li
    class="list-row h-12 flex-shrink-0 cursor-pointer bg-neutral/5 hover:bg-neutral/10 rounded-lg
    flex justify-between items-center relative group overflow-hidden mx-0">
        <a class="max-w-48 truncate">
        { text }
        </a>
        <div 
        class="flex gap-1 absolute top-1/2 transform transition-all duration-300
        opacity-0 group-hover:opacity-100 translate-x-[100%]
        group-hover:translate-x-0
        -translate-y-1/2 right-2">
        <button tabindex="-1" class="btn-ghost btn btn-sm btn-circle btn-neutral">
        @components.IconPin("size-4")
        </button>
        <button tabindex="-1" class="btn-ghost btn btn-sm btn-circle btn-neutral">
        @components.IconX("size-4")
        </button>
        </div>

    </li>
}

type SlideCardData struct {
    id, title, dir string
    icon templ.Component
    content templ.Component
}

templ SlideCard(data SlideCardData) {
<div  
data-signals={ fmt.Sprintf("{_%[1]sClick: false, _%[1]sHover: false}", data.id) } 
data-on-click={ fmt.Sprintf("$_%[1]sClick= true", data.id) }
data-on-click__outside={
    fmt.Sprintf("$_%sClick=false", data.id) } class="relative">
    <div 
           

    if data.dir == "left" {
        class="tooltip tooltip-right tooltip-sm transition-all duration-100"

    } else {
        class="tooltip tooltip-left tooltip-sm transition-all duration-100"
    }

    data-tip={ data.title }>
        <button data-on-mouseenter={ fmt.Sprintf("$_%[1]sHover=true;", data.id) } data-on-mouseleave={
            fmt.Sprintf("$_%sHover=false", data.id) } data-on-keydown__passive={ 
                fmt.Sprintf("evt.key === 'Enter' ? $_%[1]sClick=!$_%[1]sClick : ''", data.id) }

         

            class="btn btn-neutral btn-soft btn-circle transition-all duration-300 
        ">
            @data.icon
        </button>
    </div>
    <div 
        data-on-mouseenter={ fmt.Sprintf("$_%sHover=true", data.id) } 
        data-on-mouseleave={ fmt.Sprintf("setTimeout(() => {$_%sHover=false}, 300)",data.id) } 



        if data.dir == "left" {
        
        data-class={ fmt.Sprintf(` { 
            'opacity-100 translate-x-0' : ($_%[1]sClick||$_%[1]sHover), 
            'opacity-0 translate-x-[-120%%]' : (!$_%[1]sClick && !$_%[1]sHover)
            }`, data.id) } 
            
        class="card card-md bg-base-100/50 backdrop-blur  
        border-1 border-base-content/10
    shadow-sm shadow-base-content/20
    rounded-2xl z-10
    absolute top-0 left-0 
    transition-all duration-300 translate-x-[-120%]
    opacity-0
    transform"
        } else {
            data-class={ fmt.Sprintf(` { 
            'opacity-100 translate-x-0' : ($_%[1]sClick||$_%[1]sHover), 
            'opacity-0 translate-x-[120%%]' : (!$_%[1]sClick && !$_%[1]sHover)
            }`, data.id) } 

            class="card card-md bg-base-100/50 backdrop-blur  
            border-1 border-base-content/10
        shadow-sm shadow-base-content/20
        rounded-2xl z-10
        absolute top-0 right-0 
        transition-all duration-300 translate-x-[120%]
        opacity-0
        transform"
        }

    >
        <div class="card-body">
            @data.content
        </div>
    </div>
</div>
}

templ Settings() {
<h2 class="text-lg font-bold ">Settings</h2>
<ul tabindex="-1" class="list shadow-md  max-h-[90vh] overflow-y-scroll
space-y-2 px-1">
    <li class="pb-2 text-xs opacity-60 tracking-wide">Account</li>
    <div class="card card-sm min-w-72 bg-neutral/3 rounded-2xl border border-neutral/10">
        <div class="card-body gap-4 flex items-center flex-col gap-2">
            <div class="badge badge-primary badge-sm">Pro Plan</div>
            <div class="flex flex-col items-center gap-1">
            <div class="avatar">
              <div class="w-24 rounded-full"
              >
                <img
                src={ db.FileUrl(
                    GetAuthRecord(ctx).CollectionID,
                    GetAuthRecord(ctx).ID,
                    GetAuthRecord(ctx).Avatar,
                )} />
              </div>
            </div>
                <h3 class="card-title">{ GetAuthRecord(ctx).Name }</h3>
                <p>{GetAuthRecord(ctx).Email}</p>
            </div>

            <div class="card-actions w-full">
                    <a href="/sign-out" 
                    class="btn btn-wide btn-soft">Sign Out</a>
                    <button class="btn btn-error btn-soft btn-wide ">Delete Account</button>
            </div>
        </div>
    </div>
    <li class="pb-2 pt-4 text-xs opacity-60 tracking-wide">Usage</li>
    <div class="card card-sm min-w-72 bg-neutral/3 rounded-2xl border border-neutral/10">
        <div class="card-body gap-4 flex items-center flex-col gap-2">
        <div class="flex w-full items-center justify-between">
            <h3 class="font-bold text-sm">Message Credits</h3>
            <span class="text-xs opacity-60">Resets 06/01/2026</span>
        </div>

        <div class="w-full">
            <div class="flex w-full items-center justify-between">
            <span class="">Standard</span>
            <span>121/1500</span>
            </div>
            <progress class="progress w-full" value="121" max="1500"></progress>
            <span class="text-xs opacity-60">1,379 messages remaining</span>
        </div>

        <div class="w-full">
            <div class="flex w-full items-center justify-between">
            <span class="">Premium</span>
            <span>10/100</span>
            </div>
            <progress class="progress w-full" value="10" max="100"></progress>
            <span class="text-xs opacity-60">90 messages remaining</span>
        </div>

                    <button class="btn btn-primary btn-soft btn-wide ">
                        <span>Buy more credits</span>
                        @components.IconArrowUp("size-5 transform rotate-90")
                    </button>
        </div>
    </div>
</ul>
}

templ Theme() {
<div class="min-w-64">Theme</div>
}

templ Keybinds() {
<div class="min-w-64">Keybinds</div>
}


type ModelCardData struct {
    id string
    name string
    company string
    badges []templ.Component
    color Color
}
templ ModelCard(data ModelCardData) {
    <div     
    data-on-click={fmt.Sprintf("$model = '%s'", data.name)}
    if data.color == ColorPrimary || data.company == "anthropic" {
       class="card w-full min-w-52 aspect-[3/2] bg-primary/20
        text-primary
        transition-all duration-300
        cursor-pointer
        shadow-sm hover:bg-primary hover:text-primary-content "
    } else if data.color == ColorAccent || data.company == "google" {
        class="card w-full min-w-52 aspect-[3/2] bg-accent/20
        text-accent
        transition-all duration-300
        cursor-pointer
        shadow-sm hover:bg-accent hover:text-accent-content "
    } else if data.color == ColorNeutral {
        class="card w-full min-w-52 aspect-[3/2] bg-neutral/20
        text-neutral
        transition-all duration-300
        cursor-pointer
        shadow-sm hover:bg-neutral hover:text-neutral-content "
    } else if data.color == ColorInfo {
        class="card w-full min-w-52 aspect-[3/2] bg-info/20
        text-info
        transition-all duration-300
        cursor-pointer
        shadow-sm hover:bg-info hover:text-info-content "
    } else if data.color == ColorSuccess || data.company == "openai" {
        class="card w-full min-w-52 aspect-[3/2] bg-success/20
        text-success
        transition-all duration-300
        cursor-pointer
        shadow-sm hover:bg-success hover:text-success-content "
    } else if data.color == ColorWarning {
        class="card w-full min-w-52 aspect-[3/2] bg-warning/20
        text-warning
        transition-all duration-300
        cursor-pointer
        shadow-sm hover:bg-warning hover:text-warning-content "
    } else if data.color == ColorError {
        class="card w-full min-w-52 aspect-[3/2] bg-error/20
        text-error
        transition-all duration-300
        cursor-pointer
        shadow-sm hover:bg-error hover:text-error-content "
    } else {
        class="card w-full min-w-52 aspect-[3/2] bg-secondary/20
        text-secondary
        transition-all duration-300
        cursor-pointer
        shadow-sm hover:bg-secondary hover:text-secondary-content "

    }
    >
        <div class="card-body  p-5">
            <!--Name-->
            <h3 class="card-title max-w-20">{ strings.ReplaceAll(strings.Split(data.name, "/")[1], "-", " ") }</h3>
           <!-- Logo --> 
           <div class="absolute top-5 end-5">
            switch data.company {
                case "openai":
                @components.LogoGPT("size-7")
                case "anthropic":
                @components.LogoClaude("size-7")
                case "google":
                @components.LogoGemini("size-7")
                case "deepseek":
                @components.LogoDeepSeek("size-7")
                default:
                @components.LogoGPT("size-7")
            }
           </div>
           <!--Badges -->
           <div class="absolute bottom-5">
            <ul class="flex gap-2 items-center justify-end">
                for _,badge := range data.badges {
                    <li>
                        @badge
                    </li>
                }
            </ul>
           </div>
        </div>
    </div>
}

//--Badge-- 
//TODO: Move to components
type Color string

const (
    ColorPrimary Color = "primary"
    ColorSecondary Color = "secondary"
    ColorAccent Color = "accent"
    ColorNeutral Color = "neutral"
    ColorInfo Color = "info"
    ColorSuccess Color = "success"
    ColorWarning Color = "warning"
    ColorError Color = "error"
)

type BadgeData struct {
    text string
    icon templ.Component
    color Color
}

templ Badge(data BadgeData) {
    <div 
    class="tooltip tooltip-bottom tooltip-sm " 
    data-tip={ data.text}>

    <div 
    if data.color == ColorPrimary {
        class="h-7 w-7 bg-primary-content/50 text-primary rounded-full flex items-center justify-center"
    } else if data.color == ColorSecondary {
        class="h-7 w-7 bg-secondary-content/50 text-secondary rounded-full flex items-center justify-center"
    } else if data.color == ColorAccent {
        class="h-7 w-7 bg-accent-content/50 text-accent rounded-full flex items-center justify-center"
    } else if data.color == ColorInfo {
        class="h-7 w-7 bg-info-content/50 text-info rounded-full flex items-center justify-center"
    } else if data.color == ColorSuccess {
        class="h-7 w-7 bg-success-content/50 text-success rounded-full flex items-center justify-center"
    } else if data.color == ColorWarning {
        class="h-7 w-7 bg-warning-content/50 text-warning rounded-full flex items-center justify-center"
    } else if data.color == ColorError {
        class="h-7 w-7 bg-error-content/50 text-error rounded-full flex items-center justify-center"
    } else {
        class="h-7 w-7 bg-neutral-content/50 text-neutral rounded-full flex items-center justify-center"
    }
    >
        @data.icon
    </div>
    </div>

}
//End --Badge--

templ Models() {
<h2 class="text-lg font-bold">Models</h2>
<label class="input w-full">
  @components.IconSearch("size-4")
  <input tabindex="-1"  type="search" class="grow" placeholder="Search" />
</label>
<ul tabindex="-1" class="list shadow-md min-w-[45vw] max-h-96 overflow-y-scroll
space-y-2 px-1">
    for company, models := range GetModelsMap(ctx) {
        <li class="pb-2 pt-4 text-xs opacity-60 tracking-wide capitalize">{company}</li>
        
            <ul class="grid grid-cols-1 sm:grid-cols-3 gap-2 mx-auto">
            for _, model := range models {
                @ModelCard(ModelCardData{
                id: model.ID,
                company: company,
                color: ColorSecondary,
                name: model.Name ,
                })
            }
            </ul>
    }
</ul>

}


templ ActionBar() {
<section class="fixed z-10 right-0 flex flex-col gap-4
        items-end justify-start h-full p-4
    ">
    <div class="tooltip tooltip-sm tooltip-left" data-tip="Mute">
        <button class="btn btn-neutral btn-circle">
            @components.IconSpeaker("size-5")
        </button>
    </div>
    @SlideCard(SlideCardData{
        dir: "right",
        id: "settings",
        title: "Settings",
        icon: components.IconSettings("size-5"),
        content: Settings(),
        })

    @SlideCard(SlideCardData{
        dir: "right",
        id: "theme",
        title: "Theme",
        icon: components.IconPaintRoller("size-5"),
        content: Theme(),
        })

    @SlideCard(SlideCardData{
        dir: "right",
        id: "keybinds",
        title: "Keybinds",
        icon: components.IconKeyboard("size-5"),
        content: Keybinds(),
        })

    @SlideCard(SlideCardData{
        dir: "right",
        id: "models",
        title: "Models",
        icon: components.IconCPU("size-5"),
        content: Models(),
        })

</section>
}

templ PromptBar() {
<section 
data-class="{ 'opacity-100' : true }"
class="fixed z-10 bottom-0 start-0 flex gap-2 sm:gap-3 items-center justify-center w-full 
    bg-base-100/0 backdrop-blur p-4 sm:p-6 shadow-md shadow-base-content
    transition-all duration-500 opacity-0
    ">
    <!-- Attach file -->
    <div class="tooltip tooltip-sm tooltip-accent" data-tip="Attach File">
        <!-- styles secondary if active -->
        <button class="btn btn-accent btn-circle btn-soft">
            @components.IconPaperclip("size-5")
        </button>
    </div>
    <!-- Reasoning -->
    <div class="tooltip tooltip-sm tooltip-accent" data-tip="Reasoning">
        <!-- styles secondary if active -->
        <button class="btn btn-accent btn-circle btn-soft ">
            @components.IconBrain("size-5")
        </button>
    </div>
    <!-- Web Search -->
    <div class="tooltip tooltip-sm tooltip-accent" data-tip="Web Search">
        <!-- styles secondary if active -->
        <button class="btn btn-accent btn-circle btn-soft">
            @components.IconWeb("size-5")
        </button>
    </div>
    <!-- Prompt -->
        <textarea 
        id="prompt"
        tabindex="1"
        data-on-input="
        evt.target.style.height = 0 + 'px'; 
        evt.target.style.height =  evt.target.scrollHeight + 'px';
        $prompt = evt.target.value;
        "
        data-on-keydown__window="
            evt.key === 'Enter' && evt.metaKey && $prompt !== '' && 
            ($chat = [...$chat, { role: 'user', content: [{ type: 'text', text: $prompt }] }], @post('/chat'), $prompt = '', 
            document.getElementById('prompt').value = '');
        "


        class="textarea  resize-none min-w-40 sm:min-w-72 w-full max-h-52 min-h-10 h-10
        max-w-lg"  placeholder="Type here"></textarea>
    <!-- Send Prompt -->
    <div class="tooltip tooltip-sm tooltip-primary" data-tip="Send Prompt">
        <button 

        data-attr-disabled="$prompt === ''"
    
        data-on-click="
        $chat = [...$chat, { role: 'user', content: [{ type: 'text', text: $prompt }] }]
        ;@post('/chat'); $prompt = '';document.getElementById('prompt').value = ''" class="btn btn-primary btn-circle">
            @components.IconArrowUp("size-5")
        </button>
    </div>
</section>
}
